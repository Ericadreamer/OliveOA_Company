package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.PropertiesInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROPERTIES_INFO".
*/
public class PropertiesInfoDao extends AbstractDao<PropertiesInfo, Void> {

    public static final String TABLENAME = "PROPERTIES_INFO";

    /**
     * Properties of entity PropertiesInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Gid = new Property(0, String.class, "gid", false, "GID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Describe = new Property(2, String.class, "describe", false, "DESCRIBE");
        public final static Property Total = new Property(3, String.class, "total", false, "TOTAL");
        public final static Property Remaining = new Property(4, String.class, "remaining", false, "REMAINING");
        public final static Property Pcid = new Property(5, String.class, "pcid", false, "PCID");
    }


    public PropertiesInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PropertiesInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROPERTIES_INFO\" (" + //
                "\"GID\" TEXT," + // 0: gid
                "\"NAME\" TEXT," + // 1: name
                "\"DESCRIBE\" TEXT," + // 2: describe
                "\"TOTAL\" TEXT," + // 3: total
                "\"REMAINING\" TEXT," + // 4: remaining
                "\"PCID\" TEXT);"); // 5: pcid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROPERTIES_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PropertiesInfo entity) {
        stmt.clearBindings();
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(1, gid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(3, describe);
        }
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(4, total);
        }
 
        String remaining = entity.getRemaining();
        if (remaining != null) {
            stmt.bindString(5, remaining);
        }
 
        String pcid = entity.getPcid();
        if (pcid != null) {
            stmt.bindString(6, pcid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PropertiesInfo entity) {
        stmt.clearBindings();
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(1, gid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(3, describe);
        }
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(4, total);
        }
 
        String remaining = entity.getRemaining();
        if (remaining != null) {
            stmt.bindString(5, remaining);
        }
 
        String pcid = entity.getPcid();
        if (pcid != null) {
            stmt.bindString(6, pcid);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PropertiesInfo readEntity(Cursor cursor, int offset) {
        PropertiesInfo entity = new PropertiesInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // gid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // describe
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // total
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remaining
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // pcid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PropertiesInfo entity, int offset) {
        entity.setGid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescribe(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotal(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemaining(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPcid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PropertiesInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PropertiesInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(PropertiesInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
